import type { Select as ElSelectType, Tree as ElTreeType } from 'element-ui';
import type { CreateElement, VNodeData } from 'vue';
import type { Obj } from './utils';
declare const ElSelectTree_base: import("vue-class-component/lib/declarations").VueClass<object & import("vue/types/v3-component-options").ExtractComputedReturns<{}> & Record<never, any> & {
    name: string;
    id: string;
    value: unknown;
    autocomplete: string;
    autoComplete: string;
    automaticDropdown: boolean;
    size: string;
    disabled: boolean;
    clearable: boolean;
    filterable: boolean;
    allowCreate: boolean;
    loading: boolean;
    popperClass: string;
    remote: boolean;
    loadingText: string;
    noMatchText: string;
    noDataText: string;
    remoteMethod: Function;
    filterMethod: Function;
    multiple: boolean;
    multipleLimit: number;
    placeholder: string;
    defaultFirstOption: boolean;
    reserveKeyword: boolean;
    valueKey: string;
    collapseTags: boolean;
    popperAppendToBody: boolean;
} & import("vue").ShallowUnwrapRef<{}> & {
    data: any[];
    emptyText: string;
    renderAfterExpand: boolean;
    nodeKey: string;
    checkStrictly: boolean;
    defaultExpandAll: boolean;
    expandOnClickNode: boolean;
    checkOnClickNode: boolean;
    checkDescendants: boolean;
    autoExpandParent: boolean;
    defaultCheckedKeys: unknown[];
    defaultExpandedKeys: unknown[];
    currentNodeKey: string | number;
    renderContent: Function;
    showCheckbox: boolean;
    draggable: boolean;
    allowDrag: Function;
    allowDrop: Function;
    props: any;
    lazy: boolean;
    highlightCurrent: boolean;
    load: Function;
    filterNodeMethod: Function;
    accordion: boolean;
    indent: number;
    iconClass: string;
}>;
export default class ElSelectTree extends ElSelectTree_base {
    cacheData: Obj[];
    select: ElSelectType;
    tree: ElTreeType<any, any>;
    render(h: CreateElement): import("vue").VNode;
    mounted(): void;
    protected getSelectVNodeData(): VNodeData;
    protected getTreeVNodeData(): VNodeData;
    protected renderCacheOptions(h: CreateElement): import("vue").VNode;
    protected renderSlots(h: CreateElement): any[];
    protected renderValidate(): void;
    private get cacheOptions();
    private get cacheOptionsMap();
    protected get values(): any[];
    get privateValue(): unknown;
    set privateValue(val: unknown);
    private updateCheckbox;
    protected expandedKeys: any[];
    _updateDefaultExpandedKeys(): any[];
    private get propsElSelect();
    private get propsElTree();
    /**
     * 禁止直接引用，通过 getValByProp 获取节点值
     */
    protected get propsMixin(): Record<'value' | 'label' | 'children' | 'disabled' | 'isLeaf', string | ((data: Obj, node?: Obj) => any)>;
    /**
     * 获取节点的 prop 对应的值
     */
    protected getValByProp(prop: 'value' | 'label' | 'children' | 'disabled' | 'isLeaf', data: Obj): any;
    private _renderContent;
    protected _filterMethod(val?: string): void;
    protected _filterNodeMethod(value: any, data: any, node: any): any;
    private _nodeClick;
    protected _visibleChange(val: any): void;
    protected updatePopper(): void;
    private _check;
    private canSelect;
    protected focusInput(): void;
}
export {};
