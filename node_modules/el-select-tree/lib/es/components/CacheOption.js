/*!
 * el-select-tree v2.1.1-beta.15
 * (c) 2019-2024 yujinpan
 * Released under the MIT License.
 */

import 'core-js/modules/es.array.from.js';
import 'core-js/modules/es.array.includes.js';
import 'core-js/modules/es.array.push.js';
import 'core-js/modules/es.object.to-string.js';
import 'core-js/modules/es.string.includes.js';
import 'core-js/modules/es.string.iterator.js';
import 'core-js/modules/web.dom-collections.for-each.js';
import 'core-js/modules/web.dom-collections.iterator.js';
import Vue from 'vue';

var CacheOptions = Vue.extend({
  inject: ['select'],
  props: {
    data: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    values: {
      type: Array,
      default: function _default() {
        return [];
      }
    }
  },
  watch: {
    data: function data() {
      this.update();
    },
    values: function values() {
      this.update();
    }
  },
  methods: {
    update: function update() {
      var _this = this,
        _select$$el;
      var select = this['select'];
      this.data.forEach(function (item) {
        if (_this.values.includes(item.value) && !select.cachedOptions.some(function (cached) {
          return cached.value === item.value;
        })) {
          select.cachedOptions.push(item);
        }
      });

      // fork from element-ui/packages/select/src/select.vue#435
      var inputs = Array.from(((_select$$el = select.$el) === null || _select$$el === void 0 ? void 0 : _select$$el.querySelectorAll('input')) || []);
      if (!inputs.includes(document.activeElement)) {
        select.setSelected();
      }
    }
  },
  render: function render() {
    return undefined;
  },
  mounted: function mounted() {
    this.update();
  }
});

export { CacheOptions as default };
