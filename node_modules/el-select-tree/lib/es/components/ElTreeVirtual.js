/*!
 * el-select-tree v2.1.1-beta.15
 * (c) 2019-2024 yujinpan
 * Released under the MIT License.
 */

import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import 'core-js/modules/es.error.cause.js';
import Vue from 'vue';
import getElTreeNodeVirtual from './ElTreeNodeVirtual.js';
import { banReactive } from './utils.js';

/**
 * create when use
 */
function getElTreeVirtual() {
  if (getElTreeVirtual._cache) return getElTreeVirtual._cache;
  var ElTree = Vue.component('ElTree');
  return getElTreeVirtual._cache = {
    extends: ElTree.options,
    components: {
      ElTreeNode: getElTreeNodeVirtual()
    },
    props: {
      dataVirtual: Array
    },
    data: function data() {
      return {
        storeVirtual: null
      };
    },
    watch: {
      dataVirtual: function dataVirtual(newVal) {
        this.storeVirtual.setData(newVal);
      }
    },
    methods: {
      setCheckedNodes: function setCheckedNodes(nodes, leafOnly) {
        if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCheckedNodes');
        this.store.setCheckedNodes(nodes, leafOnly);
        this.storeVirtual.setCheckedNodes(nodes, leafOnly);
      },
      setCheckedKeys: function setCheckedKeys(keys, leafOnly) {
        if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCheckedKeys');
        this.store.setCheckedKeys(keys, leafOnly);
        this.storeVirtual.setCheckedKeys(keys, leafOnly);
      },
      setChecked: function setChecked(data, checked, deep) {
        this.store.setChecked(data, checked, deep);
        this.storeVirtual.setChecked(data, checked, deep);
      },
      getCheckedNodes: function getCheckedNodes(leafOnly, includeHalfChecked) {
        return this.storeVirtual.getCheckedNodes(leafOnly, includeHalfChecked);
      },
      getCheckedKeys: function getCheckedKeys(leafOnly) {
        return this.storeVirtual.getCheckedKeys(leafOnly);
      },
      getHalfCheckedNodes: function getHalfCheckedNodes() {
        return this.storeVirtual.getHalfCheckedNodes();
      },
      getHalfCheckedKeys: function getHalfCheckedKeys() {
        return this.storeVirtual.getHalfCheckedKeys();
      }
    },
    mounted: function mounted() {
      var TreeStore = this.store.constructor;
      this.storeVirtual = banReactive(new TreeStore(_objectSpread(_objectSpread({}, this.$props), {}, {
        key: this.nodeKey,
        data: this.dataVirtual
      })));
    }
  };
}
getElTreeVirtual._cache = null;

export { getElTreeVirtual as default };
