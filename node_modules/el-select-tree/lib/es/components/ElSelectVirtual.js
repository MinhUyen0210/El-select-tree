/*!
 * el-select-tree v2.1.1-beta.15
 * (c) 2019-2024 yujinpan
 * Released under the MIT License.
 */

import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import Vue from 'vue';
import { getElSelectMenu } from './ElSelect.js';

/**
 * create when use
 */
function getElSelectVirtual() {
  if (getElSelectVirtual._cache) return getElSelectVirtual._cache;
  var ElSelect = Vue.component('ElSelect');
  return getElSelectVirtual._cache = {
    extends: _objectSpread(_objectSpread({}, ElSelect.options), {}, {
      watch: _objectSpread(_objectSpread({}, ElSelect.options.watch), {}, {
        options: undefined
      })
    }),
    components: {
      ElSelectMenu: getElSelectMenu()
    },
    props: {},
    watch: {
      // fork from node_modules/element-ui/packages/select/src/select.vue#427
      options: function options() {
        var _this = this;
        if (this.$isServer) return;
        this.$nextTick(function () {
          _this.broadcast('ElSelectDropdown', 'updatePopper');
        });
        if (this.multiple) {
          this.resetInputHeight();
        }
        var inputs = this.$el.querySelectorAll('input');
        if ([].indexOf.call(inputs, document.activeElement) === -1 &&
        // fix: virtual filter keywords lose when any operations
        !this.multiple && !this.query) {
          this.setSelected();
        }
        if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
          this.checkDefaultFirstOption();
        }
      }
    }
  };
}
getElSelectVirtual._cache = null;

export { getElSelectVirtual as default };
