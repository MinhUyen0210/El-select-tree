/*!
 * el-select-tree v2.1.1-beta.15
 * (c) 2019-2024 yujinpan
 * Released under the MIT License.
 */

import _regeneratorRuntime from '@babel/runtime/helpers/esm/regeneratorRuntime';
import _asyncToGenerator from '@babel/runtime/helpers/esm/asyncToGenerator';
import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import _toConsumableArray from '@babel/runtime/helpers/esm/toConsumableArray';
import _initializerDefineProperty from '@babel/runtime/helpers/esm/initializerDefineProperty';
import _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';
import _createClass from '@babel/runtime/helpers/esm/createClass';
import _callSuper from '@babel/runtime/helpers/esm/callSuper';
import _inherits from '@babel/runtime/helpers/esm/inherits';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _applyDecoratedDescriptor from '@babel/runtime/helpers/esm/applyDecoratedDescriptor';
import '@babel/runtime/helpers/esm/initializerWarningHelper';
import 'core-js/modules/es.error.cause.js';
import 'core-js/modules/es.array.concat.js';
import 'core-js/modules/es.array.filter.js';
import 'core-js/modules/es.array.find.js';
import 'core-js/modules/es.array.includes.js';
import 'core-js/modules/es.array.push.js';
import 'core-js/modules/es.array.slice.js';
import 'core-js/modules/es.array.splice.js';
import 'core-js/modules/es.object.get-own-property-descriptor.js';
import 'core-js/modules/es.object.keys.js';
import 'core-js/modules/es.object.to-string.js';
import 'core-js/modules/es.regexp.to-string.js';
import 'core-js/modules/es.string.includes.js';
import 'core-js/modules/web.dom-collections.for-each.js';
import 'core-js/modules/web.dom-collections.iterator.js';
import Vue from 'vue';
import { Component, Prop, Ref, Watch, Mixins } from 'vue-property-decorator';
import CacheOptions from './CacheOption.js';
import getElSelect from './ElSelect.js';
import getElSelectTreeOption from './ElSelectTreeOption.js';
import { treeEach, toArr, compareArrayChanges, isValidArr, getParentKeys, propsPick, ElSelectMixinOptions, ElTreeMixinOptions, getCompoundVal, treeFind, isValidValue, ElSelectMixin, ElTreeMixin } from './utils.js';
import styleInject from 'style-inject';
import __vue_normalize__ from 'vue-runtime-helpers/dist/normalize-component.js';

var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3;
var ElSelectTree = (_dec = Component({
  name: 'ElSelectTree'
}), _dec2 = Prop({
  type: Array,
  default: function _default() {
    return [];
  }
}), _dec3 = Ref('select'), _dec4 = Ref('tree'), _dec5 = Watch('data'), _dec6 = Watch('value'), _dec7 = Watch('data'), _dec8 = Watch('defaultExpandedKeys', {
  immediate: true
}), _dec(_class = (_class2 = /*#__PURE__*/function (_Mixins) {
  function ElSelectTree() {
    var _this;
    _classCallCheck(this, ElSelectTree);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, ElSelectTree, [].concat(args));
    _initializerDefineProperty(_this, "cacheData", _descriptor, _this);
    _initializerDefineProperty(_this, "select", _descriptor2, _this);
    _initializerDefineProperty(_this, "tree", _descriptor3, _this);
    // Expand the parent node of the selected node by default,
    // "default" is the value/data/defaultExpandedKeys
    // changed from user assign value, rather than current component
    _defineProperty(_this, "expandedKeys", []);
    return _this;
  }
  _inherits(ElSelectTree, _Mixins);
  return _createClass(ElSelectTree, [{
    key: "render",
    value: function render(h) {
      this.renderValidate();
      return h(getElSelect(), this.getSelectVNodeData(), [].concat(_toConsumableArray(this.renderSlots(h)), [this.renderCacheOptions(h), h('el-tree', this.getTreeVNodeData())]));
    }
  }, {
    key: "mounted",
    value: function mounted() {
      var _this2 = this;
      // get ElTree/ElSelect all methods
      this.$nextTick(function () {
        ['focus', 'blur'].forEach(function (item) {
          _this2[item] = _this2.select[item];
        });
        ['filter', 'updateKeyChildren', 'getCheckedNodes', 'setCheckedNodes', 'getCheckedKeys', 'setCheckedKeys', 'setChecked', 'getHalfCheckedNodes', 'getHalfCheckedKeys', 'getCurrentKey', 'getCurrentNode', 'setCurrentKey', 'setCurrentNode', 'getNode', 'remove', 'append', 'insertBefore', 'insertAfter'].forEach(function (item) {
          _this2[item] = _this2.tree[item];
        });
      });
      this.updateCheckbox();
    }
  }, {
    key: "getSelectVNodeData",
    value: function getSelectVNodeData() {
      var _this3 = this;
      return {
        ref: 'select',
        props: _objectSpread(_objectSpread({}, this.propsElSelect), {}, {
          value: this.privateValue,
          popperClass: "el-select-tree__popper ".concat(this.propsElSelect.popperClass || ''),
          filterMethod: this._filterMethod
        }),
        on: _objectSpread(_objectSpread({}, this.$listeners), {}, {
          change: function change(val) {
            _this3.privateValue = val;
          },
          'visible-change': this._visibleChange
        })
      };
    }
  }, {
    key: "getTreeVNodeData",
    value: function getTreeVNodeData() {
      var _this4 = this;
      return {
        ref: 'tree',
        props: _objectSpread(_objectSpread({}, this.propsElTree), {}, {
          expandOnClickNode: !this.checkStrictly && this.expandOnClickNode,
          filterNodeMethod: this._filterNodeMethod,
          nodeKey: this.propsMixin.value,
          defaultExpandedKeys: this.expandedKeys,
          renderContent: this._renderContent
        }),
        on: _objectSpread(_objectSpread({}, this.$listeners), {}, {
          'node-click': this._nodeClick,
          check: this._check
        }),
        nativeOn: {
          transitionend: function transitionend(e) {
            if (e.propertyName === 'height') {
              _this4.updatePopper();
            }
          }
        }
      };
    }
  }, {
    key: "renderCacheOptions",
    value: function renderCacheOptions(h) {
      return h(CacheOptions, {
        props: {
          data: this.cacheOptions,
          values: this.values
        }
      });
    }
  }, {
    key: "renderSlots",
    value: function renderSlots(h) {
      var _this5 = this;
      var slots = [];
      ['prefix', 'empty', 'header', 'footer'].forEach(function (key) {
        if (_this5.$scopedSlots[key]) {
          slots.push(h('template', {
            slot: key
          }, _this5.$scopedSlots[key](_this5)));
        }
      });
      return slots;
    }
  }, {
    key: "renderValidate",
    value: function renderValidate() {
      if (!Vue.component('ElSelect') || !Vue.component('ElTree') || !Vue.component('ElOption')) {
        throw new Error("[ElSelectTree]: ElSelect/ElTree/ElOption unregistered.");
      }
    }
  }, {
    key: "cacheOptions",
    get: function get() {
      var _this6 = this;
      if (!this.renderAfterExpand && !this.lazy) return [];
      var options = [];
      treeEach(this.data.concat(this.cacheData), function (node) {
        var value = _this6.getValByProp('value', node);
        options.push({
          value: value,
          currentLabel: _this6.getValByProp('label', node),
          isDisabled: _this6.getValByProp('disabled', node)
        });
      }, function (data) {
        return _this6.getValByProp('children', data);
      });
      return options;
    }
  }, {
    key: "cacheOptionsMap",
    get: function get() {
      var result = {};
      this.cacheOptions.forEach(function (item) {
        return result[item.value] = item;
      });
      return result;
    }
  }, {
    key: "values",
    get: function get() {
      return toArr(this.value);
    }
  }, {
    key: "privateValue",
    get: function get() {
      return this.value;
    },
    set: function set(val) {
      this.$emit('change', val);
    }
  }, {
    key: "updateCheckbox",
    value: function () {
      var _updateCheckbox = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _this7 = this;
        var _compareArrayChanges, add, remove;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!this.showCheckbox) {
                _context.next = 6;
                break;
              }
              _context.next = 3;
              return this.$nextTick();
            case 3:
              _compareArrayChanges = compareArrayChanges(this.tree.getCheckedKeys(!this.checkStrictly), this.values), add = _compareArrayChanges.add, remove = _compareArrayChanges.remove;
              add.forEach(function (item) {
                _this7.tree.setChecked(item, true, false);
              });
              remove.forEach(function (item) {
                _this7.tree.setChecked(item, false, false);
              });
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function updateCheckbox() {
        return _updateCheckbox.apply(this, arguments);
      }
      return updateCheckbox;
    }()
  }, {
    key: "_updateDefaultExpandedKeys",
    value: function _updateDefaultExpandedKeys() {
      var parentKeys = isValidArr(this.values) && isValidArr(this.data) ? getParentKeys(this.values, this.data, this.getValByProp) : [];
      return this.expandedKeys = this.defaultExpandedKeys ? this.defaultExpandedKeys.concat(parentKeys) : parentKeys;
    }
  }, {
    key: "propsElSelect",
    get: function get() {
      return propsPick(this.$props, Object.keys(ElSelectMixinOptions.props));
    }
  }, {
    key: "propsElTree",
    get: function get() {
      return _objectSpread(_objectSpread({}, propsPick(this.$props, Object.keys(ElTreeMixinOptions.props))), {}, {
        props: this.propsMixin
      });
    }

    /**
     * 禁止直接引用，通过 getValByProp 获取节点值
     */
  }, {
    key: "propsMixin",
    get: function get() {
      return _objectSpread({
        value: this.nodeKey || 'value',
        label: 'label',
        children: 'children',
        disabled: 'disabled',
        isLeaf: 'isLeaf'
      }, this.props);
    }

    /**
     * 获取节点的 prop 对应的值
     */
  }, {
    key: "getValByProp",
    value: function getValByProp(prop, data) {
      var _this$tree;
      var propVal = this.propsMixin[prop];
      return getCompoundVal(data, propVal, (_this$tree = this.tree) === null || _this$tree === void 0 ? void 0 : _this$tree.getNode(getCompoundVal(data, this.propsMixin.value)));
    }
  }, {
    key: "_renderContent",
    value: function _renderContent(h, _ref) {
      var node = _ref.node,
        data = _ref.data,
        store = _ref.store;
      return h(getElSelectTreeOption(), {
        props: {
          value: this.getValByProp('value', data),
          label: this.getValByProp('label', data),
          disabled: this.getValByProp('disabled', data)
        }
      }, this.renderContent ? [this.renderContent(h, {
        node: node,
        data: data,
        store: store
      })] : this.$scopedSlots.default ? this.$scopedSlots.default({
        node: node,
        data: data,
        store: store
      }) : undefined);
    }

    // el-select 的 query 事件转发至 el-tree 中
  }, {
    key: "_filterMethod",
    value: function _filterMethod() {
      var _this$filterMethod,
        _this8 = this;
      var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      (_this$filterMethod = this.filterMethod) === null || _this$filterMethod === void 0 ? void 0 : _this$filterMethod.call(this, val);

      // fix: `tree` reference is empty when component destroy
      // https://github.com/yujinpan/el-select-tree/issues/35
      this.$nextTick(function () {
        _this8.tree && _this8.tree.filter(val);
        _this8.updatePopper();
      });
    }
  }, {
    key: "_filterNodeMethod",
    value: function _filterNodeMethod(value, data, node) {
      var _this$getValByProp;
      // fix: https://github.com/yujinpan/el-select-tree/issues/35
      if (this.filterMethod) return this.filterMethod(value, data, node);
      if (this.filterNodeMethod) return this.filterNodeMethod(value, data, node);
      if (!value) return true;
      return (_this$getValByProp = this.getValByProp('label', data)) === null || _this$getValByProp === void 0 ? void 0 : _this$getValByProp.toString().toLowerCase().includes(value.toLowerCase());
    }

    // can not select
  }, {
    key: "_nodeClick",
    value: function _nodeClick(data, node, component) {
      var _this$$listeners$node, _this$$listeners;
      (_this$$listeners$node = (_this$$listeners = this.$listeners)['node-click']) === null || _this$$listeners$node === void 0 ? void 0 : _this$$listeners$node.call.apply(_this$$listeners$node, [_this$$listeners].concat(Array.prototype.slice.call(arguments)));

      // `onCheck` is trigger when `checkOnClickNode`
      if (this.showCheckbox && this.checkOnClickNode) return;

      // now `checkOnClickNode` is false, only no checkbox and `checkStrictly` or `isLeaf`
      if (!this.showCheckbox && this.canSelect(node)) {
        if (!this.getValByProp('disabled', data)) {
          var elOptionSlot = component.$children.find(function (item) {
            return item.$options._componentTag === 'node-content';
          });
          var elOption = elOptionSlot.$children[0];
          elOption.dispatch('ElSelect', 'handleOptionClick', [elOption, true]);
        }
      } else if (this.expandOnClickNode) {
        component.handleExpandIconClick();
      }
      this.focusInput();
    }

    // clear filter text when visible change
  }, {
    key: "_visibleChange",
    value: function _visibleChange(val) {
      var _this$$listeners$visi, _this$$listeners2;
      (_this$$listeners$visi = (_this$$listeners2 = this.$listeners)['visible-change']) === null || _this$$listeners$visi === void 0 ? void 0 : _this$$listeners$visi.call.apply(_this$$listeners$visi, [_this$$listeners2].concat(Array.prototype.slice.call(arguments)));
      if (this.filterable && val) {
        this._filterMethod();
      }
    }
  }, {
    key: "updatePopper",
    value: function updatePopper() {
      var _this9 = this;
      this.$nextTick(function () {
        var _this9$select;
        (_this9$select = _this9.select) === null || _this9$select === void 0 ? void 0 : _this9$select.broadcast('ElSelectDropdown', 'updatePopper');
      });
    }

    // set selected when check change
  }, {
    key: "_check",
    value: function () {
      var _check2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(data, params) {
        var _this10 = this,
          _this$$listeners$chec,
          _this$$listeners3;
        var dataValue, index, uncachedCheckedKeys, cachedKeys, checkedKeys, firstLeaf, firstLeafKey, hasCheckedChild;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (this.showCheckbox) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              dataValue = this.getValByProp('value', data); // fix: checkedKeys sort with selection order
              index = params.checkedKeys.indexOf(dataValue);
              if (index !== -1) {
                params.checkedKeys.splice(index, 1);
                params.checkedKeys.push(dataValue);
              }

              // fix: checkedKeys has not cached keys
              uncachedCheckedKeys = params.checkedKeys;
              cachedKeys = this.multiple ? this.values.filter(function (item) {
                return item in _this10.cacheOptionsMap && !_this10.tree.getNode(item) && !uncachedCheckedKeys.includes(item);
              }) : [];
              checkedKeys = uncachedCheckedKeys.concat(cachedKeys);
              if (this.checkStrictly) {
                // Checking for changes may come from `check-on-node-click`
                this.privateValue = this.multiple ? checkedKeys : checkedKeys.includes(dataValue) ? dataValue : undefined;
              }
              // only can select leaf node
              else {
                if (this.multiple) {
                  this.privateValue = params.checkedKeys;
                } else {
                  // select first leaf node when check parent
                  firstLeaf = treeFind([data], function (data) {
                    return !isValidArr(_this10.getValByProp('children', data)) && !_this10.getValByProp('disabled', data);
                  }, function (data) {
                    return _this10.getValByProp('children', data);
                  });
                  firstLeafKey = firstLeaf ? this.getValByProp('value', firstLeaf) : undefined; // unselect when any child checked
                  hasCheckedChild = isValidValue(this.value) && !!treeFind([data], function (data) {
                    return _this10.getValByProp('value', data) === _this10.value;
                  }, function (data) {
                    return _this10.getValByProp('children', data);
                  });
                  this.privateValue = firstLeafKey === this.value || hasCheckedChild ? undefined : firstLeafKey;
                }
              }
              _context2.next = 11;
              return this.updateCheckbox();
            case 11:
              (_this$$listeners$chec = (_this$$listeners3 = this.$listeners).check) === null || _this$$listeners$chec === void 0 ? void 0 : _this$$listeners$chec.call(_this$$listeners3, data, {
                checkedKeys: this.tree.getCheckedKeys(),
                checkedNodes: this.tree.getCheckedNodes(),
                halfCheckedKeys: this.tree.getHalfCheckedKeys(),
                halfCheckedNodes: this.tree.getHalfCheckedNodes()
              });
              this.focusInput();
            case 13:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function _check(_x, _x2) {
        return _check2.apply(this, arguments);
      }
      return _check;
    }()
  }, {
    key: "canSelect",
    value: function canSelect(data) {
      return this.checkStrictly || this.getValByProp('isLeaf', data);
    }
  }, {
    key: "focusInput",
    value: function focusInput() {
      var _this11 = this;
      if (this.filterable) {
        setTimeout(function () {
          var _this11$select, _this11$select$$refs$;
          return (_this11$select = _this11.select) === null || _this11$select === void 0 ? void 0 : (_this11$select$$refs$ = _this11$select.$refs.input) === null || _this11$select$$refs$ === void 0 ? void 0 : _this11$select$$refs$.focus();
        });
      }
    }
  }]);
}(Mixins(ElSelectMixin, ElTreeMixin)), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "cacheData", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "select", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "tree", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _applyDecoratedDescriptor(_class2.prototype, "updateCheckbox", [_dec5, _dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "updateCheckbox"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_updateDefaultExpandedKeys", [_dec7, _dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "_updateDefaultExpandedKeys"), _class2.prototype)), _class2)) || _class);

var css_248z = ".el-select-tree__popper .el-tree .el-checkbox__input{display:-webkit-box;display:-ms-flexbox;display:flex}.el-select-tree__popper .el-select-dropdown__item{-webkit-box-flex:1;background:0 0!important;-ms-flex:1;flex:1;height:20px;line-height:20px;padding:0 30px 0 0}.el-select-tree__popper .el-select-dropdown__item.selected:after{right:10px}.el-select-tree__popper .el-select-dropdown__footer,.el-select-tree__popper .el-select-dropdown__header{padding:10px}.el-select-tree__popper .el-select-dropdown__header{border-bottom:1px solid #e4e7ed}.el-select-tree__popper .el-select-dropdown__footer{border-top:1px solid #e4e7ed}";
styleInject(css_248z);

/* script */
var __vue_script__ = ElSelectTree;
/* template */

/* style */
var __vue_inject_styles__ = undefined;
/* scoped */
var __vue_scope_id__ = undefined;
/* module identifier */
var __vue_module_identifier__ = undefined;
/* functional template */
var __vue_is_functional_template__ = undefined;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__ = /*#__PURE__*/__vue_normalize__({}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);

export { __vue_component__ as default };
