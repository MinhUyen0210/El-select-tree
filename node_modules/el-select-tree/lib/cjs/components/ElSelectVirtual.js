/*!
 * el-select-tree v2.1.1-beta.15
 * (c) 2019-2024 yujinpan
 * Released under the MIT License.
 */

'use strict';

var Vue = require('vue');
var ElSelect_js = require('./ElSelect.js');

function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      _defineProperty(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}

/**
 * create when use
 */
function getElSelectVirtual() {
  if (getElSelectVirtual._cache) return getElSelectVirtual._cache;
  var ElSelect = Vue.component('ElSelect');
  return getElSelectVirtual._cache = {
    extends: _objectSpread2(_objectSpread2({}, ElSelect.options), {}, {
      watch: _objectSpread2(_objectSpread2({}, ElSelect.options.watch), {}, {
        options: undefined
      })
    }),
    components: {
      ElSelectMenu: ElSelect_js.getElSelectMenu()
    },
    props: {},
    watch: {
      // fork from node_modules/element-ui/packages/select/src/select.vue#427
      options: function options() {
        var _this = this;
        if (this.$isServer) return;
        this.$nextTick(function () {
          _this.broadcast('ElSelectDropdown', 'updatePopper');
        });
        if (this.multiple) {
          this.resetInputHeight();
        }
        var inputs = this.$el.querySelectorAll('input');
        if ([].indexOf.call(inputs, document.activeElement) === -1 &&
        // fix: virtual filter keywords lose when any operations
        !this.multiple && !this.query) {
          this.setSelected();
        }
        if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
          this.checkDefaultFirstOption();
        }
      }
    }
  };
}
getElSelectVirtual._cache = null;

module.exports = getElSelectVirtual;
