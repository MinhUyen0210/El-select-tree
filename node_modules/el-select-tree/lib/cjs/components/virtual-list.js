/*!
 * el-select-tree v2.1.1-beta.15
 * (c) 2019-2024 yujinpan
 * Released under the MIT License.
 */

'use strict';

var throttle = require('lodash/throttle');
var utils_js = require('./utils.js');

function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      _defineProperty(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r );
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (String )(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}

var virtualList = {
  inserted: function inserted(el, bindings, vNode) {
    var _bindings$value = bindings.value,
      target = _bindings$value.target,
      virtualStore = _bindings$value.virtualStore;
    var targetElem = el.querySelector(target);
    virtualStore.mount(targetElem);
    targetElem.prepend(virtualStore.sketchTopElem);
    targetElem.append(virtualStore.sketchBottomElem);
    var handleScroll = function handleScroll() {
      var old = targetElem.scrollTop;
      virtualStore.updateScroll(targetElem.scrollTop, targetElem.clientHeight, function () {
        var _vNode$componentInsta;
        targetElem.scrollTop = old;
        (_vNode$componentInsta = vNode.componentInstance) === null || _vNode$componentInsta === void 0 ? void 0 : _vNode$componentInsta.$nextTick(function () {
          targetElem.scrollTop = old;
        });
      });
    };
    targetElem.addEventListener('scroll', handleScroll);
  }
};
var VirtualStore = /*#__PURE__*/function () {
  function VirtualStore(options) {
    _classCallCheck(this, VirtualStore);
    _defineProperty(this, "data", []);
    _defineProperty(this, "sketchTopElem", document.createElement('div'));
    _defineProperty(this, "sketchBottomElem", document.createElement('div'));
    _defineProperty(this, "scrollTop", 0);
    _defineProperty(this, "clientHeight", 0);
    this.options = options;
    this.updateScroll = throttle(this.updateScroll, 15);
  }
  return _createClass(VirtualStore, [{
    key: "setOptions",
    value: function setOptions(options) {
      this.setScrollTop(options.sourceData && this.options.sourceData !== options.sourceData ? 0 : undefined);
      Object.assign(this.options, options);
      this.updateScroll();
    }
  }, {
    key: "setScrollTop",
    value: function setScrollTop() {
      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.scrollTop;
      this.scrollTop = scrollTop;
      if (this.scrollElem) this.scrollElem.scrollTop = scrollTop;
      this.updateScroll();
    }
  }, {
    key: "mount",
    value: function mount(el) {
      this.scrollElem = el;
    }
  }, {
    key: "updateScroll",
    value: function updateScroll() {
      var _this = this;
      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.scrollTop;
      var clientHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.clientHeight;
      var callback = arguments.length > 2 ? arguments[2] : undefined;
      this.scrollTop = scrollTop;
      this.clientHeight = clientHeight || this.options.itemHeight * 15;
      var result = [];
      var height = 0;
      var heightTop = 0;
      var heightBottom = 0;
      var add = function add(node) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : result;
        var minHeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : scrollTop - _this.options.itemHeight * 3;
        var maxHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : scrollTop + _this.clientHeight + _this.options.itemHeight * 3;
        height += _this.options.itemHeight;
        var nodeChildren = node[_this.options.childrenProp] || [];
        var newNode = _objectSpread2({}, node);
        var newChildren = newNode[_this.options.childrenProp] = [].concat(nodeChildren);
        if (height < minHeight) {
          heightTop += _this.options.itemHeight;
        } else if (height >= minHeight && height - _this.options.itemHeight < maxHeight) {
          data.push(newNode);
        } else {
          heightBottom += _this.options.itemHeight;
        }
        if (utils_js.isValidArr(newChildren)) {
          var _this$options$expande;
          if ((_this$options$expande = _this.options.expandedKeys) !== null && _this$options$expande !== void 0 && _this$options$expande.includes(utils_js.getCompoundVal(newNode, _this.options.valueProp))) {
            newChildren.length = 0;
            nodeChildren.forEach(function (child) {
              return add(child, newChildren,
              // fix parent will show when scroll fast
              scrollTop - _this.options.itemHeight * 15);
            });
            if (newChildren.length && !data.includes(newNode)) {
              heightTop -= _this.options.itemHeight;
              height += _this.options.itemHeight;
              data.push(newNode);
            }
          } else {
            // show less children when expanded
            newChildren.length = Math.min(Math.ceil(_this.clientHeight / _this.options.itemHeight), newChildren.length);
          }
        }
      };
      this.options.sourceData.forEach(function (item) {
        return add(item);
      });
      this.data = result;
      this.sketchTopElem.style.height = heightTop + 'px';
      this.sketchBottomElem.style.height = heightBottom + 'px';
      callback === null || callback === void 0 ? void 0 : callback();
    }
  }]);
}();

exports.VirtualStore = VirtualStore;
exports.virtualList = virtualList;
