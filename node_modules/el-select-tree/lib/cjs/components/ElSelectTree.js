/*!
 * el-select-tree v2.1.1-beta.15
 * (c) 2019-2024 yujinpan
 * Released under the MIT License.
 */

'use strict';

var Vue = require('vue');
var vuePropertyDecorator = require('vue-property-decorator');
var CacheOptions = require('./CacheOption.js');
var getElSelect = require('./ElSelect.js');
var getElSelectTreeOption = require('./ElSelectTreeOption.js');
var utils_js = require('./utils.js');
var styleInject = require('style-inject');
var __vue_normalize__ = require('vue-runtime-helpers/dist/normalize-component.js');

function _applyDecoratedDescriptor(i, e, r, n, l) {
  var a = {};
  return Object.keys(n).forEach(function (i) {
    a[i] = n[i];
  }), a.enumerable = !!a.enumerable, a.configurable = !!a.configurable, ("value" in a || a.initializer) && (a.writable = !0), a = r.slice().reverse().reduce(function (r, n) {
    return n(i, e, r) || r;
  }, a), l && void 0 !== a.initializer && (a.value = a.initializer ? a.initializer.call(l) : void 0, a.initializer = void 0), void 0 === a.initializer && (Object.defineProperty(i, e, a), a = null), a;
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray(r);
}
function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function asyncGeneratorStep(n, t, e, r, o, a, c) {
  try {
    var i = n[a](c),
      u = i.value;
  } catch (n) {
    return void e(n);
  }
  i.done ? t(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
  return function () {
    var t = this,
      e = arguments;
    return new Promise(function (r, o) {
      var a = n.apply(t, e);
      function _next(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
      }
      function _throw(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
      }
      _next(void 0);
    });
  };
}
function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}
function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
    return t.__proto__ || Object.getPrototypeOf(t);
  }, _getPrototypeOf(t);
}
function _inherits(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: !0,
      configurable: !0
    }
  }), Object.defineProperty(t, "prototype", {
    writable: !1
  }), e && _setPrototypeOf(t, e);
}
function _initializerDefineProperty(e, i, r, l) {
  r && Object.defineProperty(e, i, {
    enumerable: r.enumerable,
    configurable: r.configurable,
    writable: r.writable,
    value: r.initializer ? r.initializer.call(l) : void 0
  });
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function () {
    return !!t;
  })();
}
function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      _defineProperty(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
function _possibleConstructorReturn(t, e) {
  if (e && ("object" == typeof e || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t);
}
function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return e;
  };
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function (t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function (t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(typeof e + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function (e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function () {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function (e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function (t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function (t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    catch: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw Error("illegal catch attempt");
    },
    delegateYield: function (e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, _setPrototypeOf(t, e);
}
function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r );
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (String )(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}

var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3;
var ElSelectTree = (_dec = vuePropertyDecorator.Component({
  name: 'ElSelectTree'
}), _dec2 = vuePropertyDecorator.Prop({
  type: Array,
  default: function _default() {
    return [];
  }
}), _dec3 = vuePropertyDecorator.Ref('select'), _dec4 = vuePropertyDecorator.Ref('tree'), _dec5 = vuePropertyDecorator.Watch('data'), _dec6 = vuePropertyDecorator.Watch('value'), _dec7 = vuePropertyDecorator.Watch('data'), _dec8 = vuePropertyDecorator.Watch('defaultExpandedKeys', {
  immediate: true
}), _dec(_class = (_class2 = /*#__PURE__*/function (_Mixins) {
  function ElSelectTree() {
    var _this;
    _classCallCheck(this, ElSelectTree);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, ElSelectTree, [].concat(args));
    _initializerDefineProperty(_this, "cacheData", _descriptor, _this);
    _initializerDefineProperty(_this, "select", _descriptor2, _this);
    _initializerDefineProperty(_this, "tree", _descriptor3, _this);
    // Expand the parent node of the selected node by default,
    // "default" is the value/data/defaultExpandedKeys
    // changed from user assign value, rather than current component
    _defineProperty(_this, "expandedKeys", []);
    return _this;
  }
  _inherits(ElSelectTree, _Mixins);
  return _createClass(ElSelectTree, [{
    key: "render",
    value: function render(h) {
      this.renderValidate();
      return h(getElSelect(), this.getSelectVNodeData(), [].concat(_toConsumableArray(this.renderSlots(h)), [this.renderCacheOptions(h), h('el-tree', this.getTreeVNodeData())]));
    }
  }, {
    key: "mounted",
    value: function mounted() {
      var _this2 = this;
      // get ElTree/ElSelect all methods
      this.$nextTick(function () {
        ['focus', 'blur'].forEach(function (item) {
          _this2[item] = _this2.select[item];
        });
        ['filter', 'updateKeyChildren', 'getCheckedNodes', 'setCheckedNodes', 'getCheckedKeys', 'setCheckedKeys', 'setChecked', 'getHalfCheckedNodes', 'getHalfCheckedKeys', 'getCurrentKey', 'getCurrentNode', 'setCurrentKey', 'setCurrentNode', 'getNode', 'remove', 'append', 'insertBefore', 'insertAfter'].forEach(function (item) {
          _this2[item] = _this2.tree[item];
        });
      });
      this.updateCheckbox();
    }
  }, {
    key: "getSelectVNodeData",
    value: function getSelectVNodeData() {
      var _this3 = this;
      return {
        ref: 'select',
        props: _objectSpread2(_objectSpread2({}, this.propsElSelect), {}, {
          value: this.privateValue,
          popperClass: "el-select-tree__popper ".concat(this.propsElSelect.popperClass || ''),
          filterMethod: this._filterMethod
        }),
        on: _objectSpread2(_objectSpread2({}, this.$listeners), {}, {
          change: function change(val) {
            _this3.privateValue = val;
          },
          'visible-change': this._visibleChange
        })
      };
    }
  }, {
    key: "getTreeVNodeData",
    value: function getTreeVNodeData() {
      var _this4 = this;
      return {
        ref: 'tree',
        props: _objectSpread2(_objectSpread2({}, this.propsElTree), {}, {
          expandOnClickNode: !this.checkStrictly && this.expandOnClickNode,
          filterNodeMethod: this._filterNodeMethod,
          nodeKey: this.propsMixin.value,
          defaultExpandedKeys: this.expandedKeys,
          renderContent: this._renderContent
        }),
        on: _objectSpread2(_objectSpread2({}, this.$listeners), {}, {
          'node-click': this._nodeClick,
          check: this._check
        }),
        nativeOn: {
          transitionend: function transitionend(e) {
            if (e.propertyName === 'height') {
              _this4.updatePopper();
            }
          }
        }
      };
    }
  }, {
    key: "renderCacheOptions",
    value: function renderCacheOptions(h) {
      return h(CacheOptions, {
        props: {
          data: this.cacheOptions,
          values: this.values
        }
      });
    }
  }, {
    key: "renderSlots",
    value: function renderSlots(h) {
      var _this5 = this;
      var slots = [];
      ['prefix', 'empty', 'header', 'footer'].forEach(function (key) {
        if (_this5.$scopedSlots[key]) {
          slots.push(h('template', {
            slot: key
          }, _this5.$scopedSlots[key](_this5)));
        }
      });
      return slots;
    }
  }, {
    key: "renderValidate",
    value: function renderValidate() {
      if (!Vue.component('ElSelect') || !Vue.component('ElTree') || !Vue.component('ElOption')) {
        throw new Error("[ElSelectTree]: ElSelect/ElTree/ElOption unregistered.");
      }
    }
  }, {
    key: "cacheOptions",
    get: function get() {
      var _this6 = this;
      if (!this.renderAfterExpand && !this.lazy) return [];
      var options = [];
      utils_js.treeEach(this.data.concat(this.cacheData), function (node) {
        var value = _this6.getValByProp('value', node);
        options.push({
          value: value,
          currentLabel: _this6.getValByProp('label', node),
          isDisabled: _this6.getValByProp('disabled', node)
        });
      }, function (data) {
        return _this6.getValByProp('children', data);
      });
      return options;
    }
  }, {
    key: "cacheOptionsMap",
    get: function get() {
      var result = {};
      this.cacheOptions.forEach(function (item) {
        return result[item.value] = item;
      });
      return result;
    }
  }, {
    key: "values",
    get: function get() {
      return utils_js.toArr(this.value);
    }
  }, {
    key: "privateValue",
    get: function get() {
      return this.value;
    },
    set: function set(val) {
      this.$emit('change', val);
    }
  }, {
    key: "updateCheckbox",
    value: function () {
      var _updateCheckbox = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _this7 = this;
        var _compareArrayChanges, add, remove;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!this.showCheckbox) {
                _context.next = 6;
                break;
              }
              _context.next = 3;
              return this.$nextTick();
            case 3:
              _compareArrayChanges = utils_js.compareArrayChanges(this.tree.getCheckedKeys(!this.checkStrictly), this.values), add = _compareArrayChanges.add, remove = _compareArrayChanges.remove;
              add.forEach(function (item) {
                _this7.tree.setChecked(item, true, false);
              });
              remove.forEach(function (item) {
                _this7.tree.setChecked(item, false, false);
              });
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function updateCheckbox() {
        return _updateCheckbox.apply(this, arguments);
      }
      return updateCheckbox;
    }()
  }, {
    key: "_updateDefaultExpandedKeys",
    value: function _updateDefaultExpandedKeys() {
      var parentKeys = utils_js.isValidArr(this.values) && utils_js.isValidArr(this.data) ? utils_js.getParentKeys(this.values, this.data, this.getValByProp) : [];
      return this.expandedKeys = this.defaultExpandedKeys ? this.defaultExpandedKeys.concat(parentKeys) : parentKeys;
    }
  }, {
    key: "propsElSelect",
    get: function get() {
      return utils_js.propsPick(this.$props, Object.keys(utils_js.ElSelectMixinOptions.props));
    }
  }, {
    key: "propsElTree",
    get: function get() {
      return _objectSpread2(_objectSpread2({}, utils_js.propsPick(this.$props, Object.keys(utils_js.ElTreeMixinOptions.props))), {}, {
        props: this.propsMixin
      });
    }

    /**
     * 禁止直接引用，通过 getValByProp 获取节点值
     */
  }, {
    key: "propsMixin",
    get: function get() {
      return _objectSpread2({
        value: this.nodeKey || 'value',
        label: 'label',
        children: 'children',
        disabled: 'disabled',
        isLeaf: 'isLeaf'
      }, this.props);
    }

    /**
     * 获取节点的 prop 对应的值
     */
  }, {
    key: "getValByProp",
    value: function getValByProp(prop, data) {
      var _this$tree;
      var propVal = this.propsMixin[prop];
      return utils_js.getCompoundVal(data, propVal, (_this$tree = this.tree) === null || _this$tree === void 0 ? void 0 : _this$tree.getNode(utils_js.getCompoundVal(data, this.propsMixin.value)));
    }
  }, {
    key: "_renderContent",
    value: function _renderContent(h, _ref) {
      var node = _ref.node,
        data = _ref.data,
        store = _ref.store;
      return h(getElSelectTreeOption(), {
        props: {
          value: this.getValByProp('value', data),
          label: this.getValByProp('label', data),
          disabled: this.getValByProp('disabled', data)
        }
      }, this.renderContent ? [this.renderContent(h, {
        node: node,
        data: data,
        store: store
      })] : this.$scopedSlots.default ? this.$scopedSlots.default({
        node: node,
        data: data,
        store: store
      }) : undefined);
    }

    // el-select 的 query 事件转发至 el-tree 中
  }, {
    key: "_filterMethod",
    value: function _filterMethod() {
      var _this$filterMethod,
        _this8 = this;
      var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      (_this$filterMethod = this.filterMethod) === null || _this$filterMethod === void 0 ? void 0 : _this$filterMethod.call(this, val);

      // fix: `tree` reference is empty when component destroy
      // https://github.com/yujinpan/el-select-tree/issues/35
      this.$nextTick(function () {
        _this8.tree && _this8.tree.filter(val);
        _this8.updatePopper();
      });
    }
  }, {
    key: "_filterNodeMethod",
    value: function _filterNodeMethod(value, data, node) {
      var _this$getValByProp;
      // fix: https://github.com/yujinpan/el-select-tree/issues/35
      if (this.filterMethod) return this.filterMethod(value, data, node);
      if (this.filterNodeMethod) return this.filterNodeMethod(value, data, node);
      if (!value) return true;
      return (_this$getValByProp = this.getValByProp('label', data)) === null || _this$getValByProp === void 0 ? void 0 : _this$getValByProp.toString().toLowerCase().includes(value.toLowerCase());
    }

    // can not select
  }, {
    key: "_nodeClick",
    value: function _nodeClick(data, node, component) {
      var _this$$listeners$node, _this$$listeners;
      (_this$$listeners$node = (_this$$listeners = this.$listeners)['node-click']) === null || _this$$listeners$node === void 0 ? void 0 : _this$$listeners$node.call.apply(_this$$listeners$node, [_this$$listeners].concat(Array.prototype.slice.call(arguments)));

      // `onCheck` is trigger when `checkOnClickNode`
      if (this.showCheckbox && this.checkOnClickNode) return;

      // now `checkOnClickNode` is false, only no checkbox and `checkStrictly` or `isLeaf`
      if (!this.showCheckbox && this.canSelect(node)) {
        if (!this.getValByProp('disabled', data)) {
          var elOptionSlot = component.$children.find(function (item) {
            return item.$options._componentTag === 'node-content';
          });
          var elOption = elOptionSlot.$children[0];
          elOption.dispatch('ElSelect', 'handleOptionClick', [elOption, true]);
        }
      } else if (this.expandOnClickNode) {
        component.handleExpandIconClick();
      }
      this.focusInput();
    }

    // clear filter text when visible change
  }, {
    key: "_visibleChange",
    value: function _visibleChange(val) {
      var _this$$listeners$visi, _this$$listeners2;
      (_this$$listeners$visi = (_this$$listeners2 = this.$listeners)['visible-change']) === null || _this$$listeners$visi === void 0 ? void 0 : _this$$listeners$visi.call.apply(_this$$listeners$visi, [_this$$listeners2].concat(Array.prototype.slice.call(arguments)));
      if (this.filterable && val) {
        this._filterMethod();
      }
    }
  }, {
    key: "updatePopper",
    value: function updatePopper() {
      var _this9 = this;
      this.$nextTick(function () {
        var _this9$select;
        (_this9$select = _this9.select) === null || _this9$select === void 0 ? void 0 : _this9$select.broadcast('ElSelectDropdown', 'updatePopper');
      });
    }

    // set selected when check change
  }, {
    key: "_check",
    value: function () {
      var _check2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(data, params) {
        var _this10 = this,
          _this$$listeners$chec,
          _this$$listeners3;
        var dataValue, index, uncachedCheckedKeys, cachedKeys, checkedKeys, firstLeaf, firstLeafKey, hasCheckedChild;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (this.showCheckbox) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              dataValue = this.getValByProp('value', data); // fix: checkedKeys sort with selection order
              index = params.checkedKeys.indexOf(dataValue);
              if (index !== -1) {
                params.checkedKeys.splice(index, 1);
                params.checkedKeys.push(dataValue);
              }

              // fix: checkedKeys has not cached keys
              uncachedCheckedKeys = params.checkedKeys;
              cachedKeys = this.multiple ? this.values.filter(function (item) {
                return item in _this10.cacheOptionsMap && !_this10.tree.getNode(item) && !uncachedCheckedKeys.includes(item);
              }) : [];
              checkedKeys = uncachedCheckedKeys.concat(cachedKeys);
              if (this.checkStrictly) {
                // Checking for changes may come from `check-on-node-click`
                this.privateValue = this.multiple ? checkedKeys : checkedKeys.includes(dataValue) ? dataValue : undefined;
              }
              // only can select leaf node
              else {
                if (this.multiple) {
                  this.privateValue = params.checkedKeys;
                } else {
                  // select first leaf node when check parent
                  firstLeaf = utils_js.treeFind([data], function (data) {
                    return !utils_js.isValidArr(_this10.getValByProp('children', data)) && !_this10.getValByProp('disabled', data);
                  }, function (data) {
                    return _this10.getValByProp('children', data);
                  });
                  firstLeafKey = firstLeaf ? this.getValByProp('value', firstLeaf) : undefined; // unselect when any child checked
                  hasCheckedChild = utils_js.isValidValue(this.value) && !!utils_js.treeFind([data], function (data) {
                    return _this10.getValByProp('value', data) === _this10.value;
                  }, function (data) {
                    return _this10.getValByProp('children', data);
                  });
                  this.privateValue = firstLeafKey === this.value || hasCheckedChild ? undefined : firstLeafKey;
                }
              }
              _context2.next = 11;
              return this.updateCheckbox();
            case 11:
              (_this$$listeners$chec = (_this$$listeners3 = this.$listeners).check) === null || _this$$listeners$chec === void 0 ? void 0 : _this$$listeners$chec.call(_this$$listeners3, data, {
                checkedKeys: this.tree.getCheckedKeys(),
                checkedNodes: this.tree.getCheckedNodes(),
                halfCheckedKeys: this.tree.getHalfCheckedKeys(),
                halfCheckedNodes: this.tree.getHalfCheckedNodes()
              });
              this.focusInput();
            case 13:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function _check(_x, _x2) {
        return _check2.apply(this, arguments);
      }
      return _check;
    }()
  }, {
    key: "canSelect",
    value: function canSelect(data) {
      return this.checkStrictly || this.getValByProp('isLeaf', data);
    }
  }, {
    key: "focusInput",
    value: function focusInput() {
      var _this11 = this;
      if (this.filterable) {
        setTimeout(function () {
          var _this11$select, _this11$select$$refs$;
          return (_this11$select = _this11.select) === null || _this11$select === void 0 ? void 0 : (_this11$select$$refs$ = _this11$select.$refs.input) === null || _this11$select$$refs$ === void 0 ? void 0 : _this11$select$$refs$.focus();
        });
      }
    }
  }]);
}(vuePropertyDecorator.Mixins(utils_js.ElSelectMixin, utils_js.ElTreeMixin)), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "cacheData", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "select", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "tree", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _applyDecoratedDescriptor(_class2.prototype, "updateCheckbox", [_dec5, _dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "updateCheckbox"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_updateDefaultExpandedKeys", [_dec7, _dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "_updateDefaultExpandedKeys"), _class2.prototype)), _class2)) || _class);

var css_248z = ".el-select-tree__popper .el-tree .el-checkbox__input{display:-webkit-box;display:-ms-flexbox;display:flex}.el-select-tree__popper .el-select-dropdown__item{-webkit-box-flex:1;background:0 0!important;-ms-flex:1;flex:1;height:20px;line-height:20px;padding:0 30px 0 0}.el-select-tree__popper .el-select-dropdown__item.selected:after{right:10px}.el-select-tree__popper .el-select-dropdown__footer,.el-select-tree__popper .el-select-dropdown__header{padding:10px}.el-select-tree__popper .el-select-dropdown__header{border-bottom:1px solid #e4e7ed}.el-select-tree__popper .el-select-dropdown__footer{border-top:1px solid #e4e7ed}";
styleInject(css_248z);

/* script */
var __vue_script__ = ElSelectTree;
/* template */

/* style */
var __vue_inject_styles__ = undefined;
/* scoped */
var __vue_scope_id__ = undefined;
/* module identifier */
var __vue_module_identifier__ = undefined;
/* functional template */
var __vue_is_functional_template__ = undefined;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__ = /*#__PURE__*/__vue_normalize__({}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);

module.exports = __vue_component__;
